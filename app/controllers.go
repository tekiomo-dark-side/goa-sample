// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "page": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/tekiomo-dark-side/goa-sample/design
// --out=$(GOPATH)/src/github.com/tekiomo-dark-side/goa-sample
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Encoder.Register(goa.NewGobEncoder, "application/gob", "application/x-gob")
	service.Encoder.Register(goa.NewXMLEncoder, "application/xml")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")
	service.Decoder.Register(goa.NewGobDecoder, "application/gob", "application/x-gob")
	service.Decoder.Register(goa.NewXMLDecoder, "application/xml")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// PagesController is the controller interface for the Pages actions.
type PagesController interface {
	goa.Muxer
	Complete(*CompletePagesContext) error
	Home(*HomePagesContext) error
}

// MountPagesController "mounts" a Pages resource controller on the given service.
func MountPagesController(service *goa.Service, ctrl PagesController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewCompletePagesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Complete(rctx)
	}
	service.Mux.Handle("GET", "/complete", ctrl.MuxHandler("complete", h, nil))
	service.LogInfo("mount", "ctrl", "Pages", "action", "Complete", "route", "GET /complete")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewHomePagesContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Home(rctx)
	}
	service.Mux.Handle("GET", "/", ctrl.MuxHandler("home", h, nil))
	service.LogInfo("mount", "ctrl", "Pages", "action", "Home", "route", "GET /")
}
