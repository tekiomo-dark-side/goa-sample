// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "page": pages Resource Client
//
// Command:
// $ goagen
// --design=github.com/tekiomo-dark-side/goa-sample/design
// --out=$(GOPATH)/src/github.com/tekiomo-dark-side/goa-sample
// --version=v1.2.0-dirty

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CompletePagesPath computes a request path to the complete action of pages.
func CompletePagesPath() string {

	return fmt.Sprintf("/complete")
}

// 完了ページ
func (c *Client) CompletePages(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCompletePagesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCompletePagesRequest create the request corresponding to the complete action endpoint of the pages resource.
func (c *Client) NewCompletePagesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// HomePagesPath computes a request path to the home action of pages.
func HomePagesPath() string {

	return fmt.Sprintf("/")
}

// トップページ
func (c *Client) HomePages(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewHomePagesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewHomePagesRequest create the request corresponding to the home action endpoint of the pages resource.
func (c *Client) NewHomePagesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
